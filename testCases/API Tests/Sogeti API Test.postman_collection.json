{
	"info": {
		"_postman_id": "48a26f36-363e-4d9f-b23f-87fcf10091fb",
		"name": "Sogeti API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33067055",
		"_collection_link": "https://www.postman.com/dsitqm/workspace/api-tests/collection/33067055-48a26f36-363e-4d9f-b23f-87fcf10091fb?action=share&source=collection_link&creator=33067055"
	},
	"item": [
		{
			"name": "testCase4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200 and content type is JSON', function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonBody();",
							"})",
							"",
							"pm.test('Response time is lower 1s', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"pm.test('Country is Germany and state is Badem-Wuerttemberg', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.country).to.eql('Germany');",
							"    pm.expect(jsonData.state).to.eql('Baden-WÃ¼rttemberg');",
							"})",
							"",
							"pm.test(\"Place name Stuttgart Degerloch has post code 70597\", function () {",
							"    const jsonData = pm.response.json();",
							"    const place = jsonData.places.find(place => place[\"place name\"] === \"Stuttgart Degerloch\");",
							"    pm.expect(place[\"post code\"]).to.eql(\"70597\");",
							"    // sees the first of two place name elements with value Stuttgart Degerloch",
							"    // which has post code value \"70567\"",
							"    // the second \"Stuttgart Degerloch\" has post code value \"70597\"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://api.zippopotam.us/de/bw/stuttgart",
					"protocol": "http",
					"host": [
						"api",
						"zippopotam",
						"us"
					],
					"path": [
						"de",
						"bw",
						"stuttgart"
					]
				}
			},
			"response": []
		},
		{
			"name": "testCase5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200 and content type is JSON', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.jsonBody();\r",
							"})\r",
							"\r",
							"pm.test('Response time is lower 1s', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"tests[\"verify country\"] = responseBody.has(data.country)\r",
							"tests[\"verify postal code\"] = responseBody.has(data[\"post code\"])\r",
							"tests[\"verify place name\"] = responseBody.has(data[\"place name\"])\r",
							"\r",
							"pm.test('Place name for each country and postal code', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const place = jsonData.find(country => country[\"country\"] === \"{{country}}\");\r",
							"    pm.expect(place[\"post code\"]).to.eql(\"{{postal-code}}\");\r",
							"    pm.expect(place[\"place name\"]).to.eql(\"{{place name}}\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"country\": \"{{country}}\",\r\n    \"post code\": \"{{postal-code}}\",\r\n    \"place name\": \"{{place name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://api.zippopotam.us/de/bw/stuttgart/{{country}}/{{postal-code}}",
					"protocol": "http",
					"host": [
						"api",
						"zippopotam",
						"us"
					],
					"path": [
						"de",
						"bw",
						"stuttgart",
						"{{country}}",
						"{{postal-code}}"
					]
				}
			},
			"response": []
		}
	]
}